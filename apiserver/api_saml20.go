/*
 * App SAML 2.0 SSO API
 *
 * API to access and configure the SAML 2.0 SSO service provider
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"net/http"
	"strings"
)

// SAML20APIController binds http requests to an api service and writes the service results to the http response
type SAML20APIController struct {
	service      SAML20APIServicer
	errorHandler ErrorHandler
}

// SAML20APIOption for how the controller is set up.
type SAML20APIOption func(*SAML20APIController)

// WithSAML20APIErrorHandler inject ErrorHandler into controller
func WithSAML20APIErrorHandler(h ErrorHandler) SAML20APIOption {
	return func(c *SAML20APIController) {
		c.errorHandler = h
	}
}

// NewSAML20APIController creates a default api controller
func NewSAML20APIController(s SAML20APIServicer, opts ...SAML20APIOption) Router {
	controller := &SAML20APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SAML20APIController
func (c *SAML20APIController) Routes() Routes {
	return Routes{
		"SamlAcsPost": Route{
			strings.ToUpper("Post"),
			"/v1/saml/acs",
			c.SamlAcsPost,
		},
		"SamlSloPost": Route{
			strings.ToUpper("Post"),
			"/v1/saml/slo",
			c.SamlSloPost,
		},
	}
}

// SamlAcsPost -
func (c *SAML20APIController) SamlAcsPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SamlAcsPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SamlSloPost -
func (c *SAML20APIController) SamlSloPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SamlSloPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
