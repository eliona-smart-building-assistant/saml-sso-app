/*
 * App SAML 2.0 SSO API
 *
 * API to access and configure the SAML 2.0 SSO service provider
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"context"
	"net/http"
)

// ConfigurationApiRouter defines the required methods for binding the api requests to a responses for the ConfigurationApi
// The ConfigurationApiRouter implementation should parse necessary information from the http request,
// pass the data to a ConfigurationApiServicer to perform the required actions, then write the service results to the http response.
type ConfigurationApiRouter interface {
	GetAdvancedConfiguration(http.ResponseWriter, *http.Request)
	GetAttributeMapping(http.ResponseWriter, *http.Request)
	GetBasicConfiguration(http.ResponseWriter, *http.Request)
	GetPermissionMapping(http.ResponseWriter, *http.Request)
	PutAdvancedConfiguration(http.ResponseWriter, *http.Request)
	PutAttributeMapping(http.ResponseWriter, *http.Request)
	PutBasicConfiguration(http.ResponseWriter, *http.Request)
	PutPermissionMapping(http.ResponseWriter, *http.Request)
}

// GenericSingleSignOnApiRouter defines the required methods for binding the api requests to a responses for the GenericSingleSignOnApi
// The GenericSingleSignOnApiRouter implementation should parse necessary information from the http request,
// pass the data to a GenericSingleSignOnApiServicer to perform the required actions, then write the service results to the http response.
type GenericSingleSignOnApiRouter interface {
	GetAuthorizationProcedure(http.ResponseWriter, *http.Request)
	GetSSOActive(http.ResponseWriter, *http.Request)
}

// SAML20ApiRouter defines the required methods for binding the api requests to a responses for the SAML20Api
// The SAML20ApiRouter implementation should parse necessary information from the http request,
// pass the data to a SAML20ApiServicer to perform the required actions, then write the service results to the http response.
type SAML20ApiRouter interface {
	SamlAcsPost(http.ResponseWriter, *http.Request)
	SamlSloPost(http.ResponseWriter, *http.Request)
}

// VersionApiRouter defines the required methods for binding the api requests to a responses for the VersionApi
// The VersionApiRouter implementation should parse necessary information from the http request,
// pass the data to a VersionApiServicer to perform the required actions, then write the service results to the http response.
type VersionApiRouter interface {
	GetOpenAPI(http.ResponseWriter, *http.Request)
	GetVersion(http.ResponseWriter, *http.Request)
}

// ConfigurationApiServicer defines the api actions for the ConfigurationApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConfigurationApiServicer interface {
	GetAdvancedConfiguration(context.Context) (ImplResponse, error)
	GetAttributeMapping(context.Context) (ImplResponse, error)
	GetBasicConfiguration(context.Context) (ImplResponse, error)
	GetPermissionMapping(context.Context) (ImplResponse, error)
	PutAdvancedConfiguration(context.Context, AdvancedConfiguration) (ImplResponse, error)
	PutAttributeMapping(context.Context, AttributeMap) (ImplResponse, error)
	PutBasicConfiguration(context.Context, BasicConfiguration) (ImplResponse, error)
	PutPermissionMapping(context.Context, Permissions) (ImplResponse, error)
}

// GenericSingleSignOnApiServicer defines the api actions for the GenericSingleSignOnApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GenericSingleSignOnApiServicer interface {
	GetAuthorizationProcedure(context.Context) (ImplResponse, error)
	GetSSOActive(context.Context) (ImplResponse, error)
}

// SAML20ApiServicer defines the api actions for the SAML20Api service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SAML20ApiServicer interface {
	SamlAcsPost(context.Context) (ImplResponse, error)
	SamlSloPost(context.Context) (ImplResponse, error)
}

// VersionApiServicer defines the api actions for the VersionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VersionApiServicer interface {
	GetOpenAPI(context.Context) (ImplResponse, error)
	GetVersion(context.Context) (ImplResponse, error)
}
