/*
 * App SAML 2.0 SSO API
 *
 * API to access and configure the SAML 2.0 SSO service provider
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// ConfigurationAPIController binds http requests to an api service and writes the service results to the http response
type ConfigurationAPIController struct {
	service      ConfigurationAPIServicer
	errorHandler ErrorHandler
}

// ConfigurationAPIOption for how the controller is set up.
type ConfigurationAPIOption func(*ConfigurationAPIController)

// WithConfigurationAPIErrorHandler inject ErrorHandler into controller
func WithConfigurationAPIErrorHandler(h ErrorHandler) ConfigurationAPIOption {
	return func(c *ConfigurationAPIController) {
		c.errorHandler = h
	}
}

// NewConfigurationAPIController creates a default api controller
func NewConfigurationAPIController(s ConfigurationAPIServicer, opts ...ConfigurationAPIOption) Router {
	controller := &ConfigurationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConfigurationAPIController
func (c *ConfigurationAPIController) Routes() Routes {
	return Routes{
		"GetAdvancedConfiguration": Route{
			strings.ToUpper("Get"),
			"/v1/configuration/advanced",
			c.GetAdvancedConfiguration,
		},
		"GetAttributeMapping": Route{
			strings.ToUpper("Get"),
			"/v1/configuration/attribute-mapping",
			c.GetAttributeMapping,
		},
		"GetBasicConfiguration": Route{
			strings.ToUpper("Get"),
			"/v1/configuration/basic",
			c.GetBasicConfiguration,
		},
		"GetPermissionMapping": Route{
			strings.ToUpper("Get"),
			"/v1/configuration/permission-mapping",
			c.GetPermissionMapping,
		},
		"PutAdvancedConfiguration": Route{
			strings.ToUpper("Put"),
			"/v1/configuration/advanced",
			c.PutAdvancedConfiguration,
		},
		"PutAttributeMapping": Route{
			strings.ToUpper("Put"),
			"/v1/configuration/attribute-mapping",
			c.PutAttributeMapping,
		},
		"PutBasicConfiguration": Route{
			strings.ToUpper("Put"),
			"/v1/configuration/basic",
			c.PutBasicConfiguration,
		},
		"PutPermissionMapping": Route{
			strings.ToUpper("Put"),
			"/v1/configuration/permission-mapping",
			c.PutPermissionMapping,
		},
	}
}

// GetAdvancedConfiguration - Get Advanced Configuration
func (c *ConfigurationAPIController) GetAdvancedConfiguration(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAdvancedConfiguration(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAttributeMapping - Get Attribute Mapping
func (c *ConfigurationAPIController) GetAttributeMapping(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAttributeMapping(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBasicConfiguration - Get Basic Configurations
func (c *ConfigurationAPIController) GetBasicConfiguration(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetBasicConfiguration(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPermissionMapping - Get Permission Mapping
func (c *ConfigurationAPIController) GetPermissionMapping(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPermissionMapping(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutAdvancedConfiguration - Creates or Update Advanced Configuration
func (c *ConfigurationAPIController) PutAdvancedConfiguration(w http.ResponseWriter, r *http.Request) {
	advancedConfigurationParam := AdvancedConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&advancedConfigurationParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdvancedConfigurationRequired(advancedConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdvancedConfigurationConstraints(advancedConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutAdvancedConfiguration(r.Context(), advancedConfigurationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutAttributeMapping - Creates or Update Attribute Mapping
func (c *ConfigurationAPIController) PutAttributeMapping(w http.ResponseWriter, r *http.Request) {
	attributeMapParam := AttributeMap{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&attributeMapParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAttributeMapRequired(attributeMapParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAttributeMapConstraints(attributeMapParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutAttributeMapping(r.Context(), attributeMapParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutBasicConfiguration - Creates or Update Basic Configuration
func (c *ConfigurationAPIController) PutBasicConfiguration(w http.ResponseWriter, r *http.Request) {
	basicConfigurationParam := BasicConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&basicConfigurationParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBasicConfigurationRequired(basicConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBasicConfigurationConstraints(basicConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutBasicConfiguration(r.Context(), basicConfigurationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutPermissionMapping - Creates or Update Permission Mapping Configurations
func (c *ConfigurationAPIController) PutPermissionMapping(w http.ResponseWriter, r *http.Request) {
	permissionsParam := Permissions{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&permissionsParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPermissionsRequired(permissionsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPermissionsConstraints(permissionsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutPermissionMapping(r.Context(), permissionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
