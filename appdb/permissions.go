// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Permission is an object representing the database table.
type Permission struct {
	ID                      int32       `boil:"id" json:"id" toml:"id" yaml:"id"`
	DefaultSystemRole       string      `boil:"default_system_role" json:"default_system_role" toml:"default_system_role" yaml:"default_system_role"`
	DefaultProjRole         string      `boil:"default_proj_role" json:"default_proj_role" toml:"default_proj_role" yaml:"default_proj_role"`
	DefaultLanguage         string      `boil:"default_language" json:"default_language" toml:"default_language" yaml:"default_language"`
	SystemRoleSamlAttribute null.String `boil:"system_role_saml_attribute" json:"system_role_saml_attribute,omitempty" toml:"system_role_saml_attribute" yaml:"system_role_saml_attribute,omitempty"`
	SystemRoleMap           null.JSON   `boil:"system_role_map" json:"system_role_map,omitempty" toml:"system_role_map" yaml:"system_role_map,omitempty"`
	ProjRoleSamlAttribute   null.String `boil:"proj_role_saml_attribute" json:"proj_role_saml_attribute,omitempty" toml:"proj_role_saml_attribute" yaml:"proj_role_saml_attribute,omitempty"`
	ProjRoleMap             null.JSON   `boil:"proj_role_map" json:"proj_role_map,omitempty" toml:"proj_role_map" yaml:"proj_role_map,omitempty"`
	LanguageSamlAttribute   null.String `boil:"language_saml_attribute" json:"language_saml_attribute,omitempty" toml:"language_saml_attribute" yaml:"language_saml_attribute,omitempty"`
	LanguageMap             null.JSON   `boil:"language_map" json:"language_map,omitempty" toml:"language_map" yaml:"language_map,omitempty"`

	R *permissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L permissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PermissionColumns = struct {
	ID                      string
	DefaultSystemRole       string
	DefaultProjRole         string
	DefaultLanguage         string
	SystemRoleSamlAttribute string
	SystemRoleMap           string
	ProjRoleSamlAttribute   string
	ProjRoleMap             string
	LanguageSamlAttribute   string
	LanguageMap             string
}{
	ID:                      "id",
	DefaultSystemRole:       "default_system_role",
	DefaultProjRole:         "default_proj_role",
	DefaultLanguage:         "default_language",
	SystemRoleSamlAttribute: "system_role_saml_attribute",
	SystemRoleMap:           "system_role_map",
	ProjRoleSamlAttribute:   "proj_role_saml_attribute",
	ProjRoleMap:             "proj_role_map",
	LanguageSamlAttribute:   "language_saml_attribute",
	LanguageMap:             "language_map",
}

var PermissionTableColumns = struct {
	ID                      string
	DefaultSystemRole       string
	DefaultProjRole         string
	DefaultLanguage         string
	SystemRoleSamlAttribute string
	SystemRoleMap           string
	ProjRoleSamlAttribute   string
	ProjRoleMap             string
	LanguageSamlAttribute   string
	LanguageMap             string
}{
	ID:                      "permissions.id",
	DefaultSystemRole:       "permissions.default_system_role",
	DefaultProjRole:         "permissions.default_proj_role",
	DefaultLanguage:         "permissions.default_language",
	SystemRoleSamlAttribute: "permissions.system_role_saml_attribute",
	SystemRoleMap:           "permissions.system_role_map",
	ProjRoleSamlAttribute:   "permissions.proj_role_saml_attribute",
	ProjRoleMap:             "permissions.proj_role_map",
	LanguageSamlAttribute:   "permissions.language_saml_attribute",
	LanguageMap:             "permissions.language_map",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PermissionWhere = struct {
	ID                      whereHelperint32
	DefaultSystemRole       whereHelperstring
	DefaultProjRole         whereHelperstring
	DefaultLanguage         whereHelperstring
	SystemRoleSamlAttribute whereHelpernull_String
	SystemRoleMap           whereHelpernull_JSON
	ProjRoleSamlAttribute   whereHelpernull_String
	ProjRoleMap             whereHelpernull_JSON
	LanguageSamlAttribute   whereHelpernull_String
	LanguageMap             whereHelpernull_JSON
}{
	ID:                      whereHelperint32{field: "\"saml_sp\".\"permissions\".\"id\""},
	DefaultSystemRole:       whereHelperstring{field: "\"saml_sp\".\"permissions\".\"default_system_role\""},
	DefaultProjRole:         whereHelperstring{field: "\"saml_sp\".\"permissions\".\"default_proj_role\""},
	DefaultLanguage:         whereHelperstring{field: "\"saml_sp\".\"permissions\".\"default_language\""},
	SystemRoleSamlAttribute: whereHelpernull_String{field: "\"saml_sp\".\"permissions\".\"system_role_saml_attribute\""},
	SystemRoleMap:           whereHelpernull_JSON{field: "\"saml_sp\".\"permissions\".\"system_role_map\""},
	ProjRoleSamlAttribute:   whereHelpernull_String{field: "\"saml_sp\".\"permissions\".\"proj_role_saml_attribute\""},
	ProjRoleMap:             whereHelpernull_JSON{field: "\"saml_sp\".\"permissions\".\"proj_role_map\""},
	LanguageSamlAttribute:   whereHelpernull_String{field: "\"saml_sp\".\"permissions\".\"language_saml_attribute\""},
	LanguageMap:             whereHelpernull_JSON{field: "\"saml_sp\".\"permissions\".\"language_map\""},
}

// PermissionRels is where relationship names are stored.
var PermissionRels = struct {
	IDConfig string
}{
	IDConfig: "IDConfig",
}

// permissionR is where relationships are stored.
type permissionR struct {
	IDConfig *Config `boil:"IDConfig" json:"IDConfig" toml:"IDConfig" yaml:"IDConfig"`
}

// NewStruct creates a new relationship struct
func (*permissionR) NewStruct() *permissionR {
	return &permissionR{}
}

func (r *permissionR) GetIDConfig() *Config {
	if r == nil {
		return nil
	}
	return r.IDConfig
}

// permissionL is where Load methods for each relationship are stored.
type permissionL struct{}

var (
	permissionAllColumns            = []string{"id", "default_system_role", "default_proj_role", "default_language", "system_role_saml_attribute", "system_role_map", "proj_role_saml_attribute", "proj_role_map", "language_saml_attribute", "language_map"}
	permissionColumnsWithoutDefault = []string{}
	permissionColumnsWithDefault    = []string{"id", "default_system_role", "default_proj_role", "default_language", "system_role_saml_attribute", "system_role_map", "proj_role_saml_attribute", "proj_role_map", "language_saml_attribute", "language_map"}
	permissionPrimaryKeyColumns     = []string{"id"}
	permissionGeneratedColumns      = []string{}
)

type (
	// PermissionSlice is an alias for a slice of pointers to Permission.
	// This should almost always be used instead of []Permission.
	PermissionSlice []*Permission
	// PermissionHook is the signature for custom Permission hook methods
	PermissionHook func(context.Context, boil.ContextExecutor, *Permission) error

	permissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	permissionType                 = reflect.TypeOf(&Permission{})
	permissionMapping              = queries.MakeStructMapping(permissionType)
	permissionPrimaryKeyMapping, _ = queries.BindMapping(permissionType, permissionMapping, permissionPrimaryKeyColumns)
	permissionInsertCacheMut       sync.RWMutex
	permissionInsertCache          = make(map[string]insertCache)
	permissionUpdateCacheMut       sync.RWMutex
	permissionUpdateCache          = make(map[string]updateCache)
	permissionUpsertCacheMut       sync.RWMutex
	permissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var permissionAfterSelectMu sync.Mutex
var permissionAfterSelectHooks []PermissionHook

var permissionBeforeInsertMu sync.Mutex
var permissionBeforeInsertHooks []PermissionHook
var permissionAfterInsertMu sync.Mutex
var permissionAfterInsertHooks []PermissionHook

var permissionBeforeUpdateMu sync.Mutex
var permissionBeforeUpdateHooks []PermissionHook
var permissionAfterUpdateMu sync.Mutex
var permissionAfterUpdateHooks []PermissionHook

var permissionBeforeDeleteMu sync.Mutex
var permissionBeforeDeleteHooks []PermissionHook
var permissionAfterDeleteMu sync.Mutex
var permissionAfterDeleteHooks []PermissionHook

var permissionBeforeUpsertMu sync.Mutex
var permissionBeforeUpsertHooks []PermissionHook
var permissionAfterUpsertMu sync.Mutex
var permissionAfterUpsertHooks []PermissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Permission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Permission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Permission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Permission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Permission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Permission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Permission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Permission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Permission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPermissionHook registers your hook function for all future operations.
func AddPermissionHook(hookPoint boil.HookPoint, permissionHook PermissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		permissionAfterSelectMu.Lock()
		permissionAfterSelectHooks = append(permissionAfterSelectHooks, permissionHook)
		permissionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		permissionBeforeInsertMu.Lock()
		permissionBeforeInsertHooks = append(permissionBeforeInsertHooks, permissionHook)
		permissionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		permissionAfterInsertMu.Lock()
		permissionAfterInsertHooks = append(permissionAfterInsertHooks, permissionHook)
		permissionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		permissionBeforeUpdateMu.Lock()
		permissionBeforeUpdateHooks = append(permissionBeforeUpdateHooks, permissionHook)
		permissionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		permissionAfterUpdateMu.Lock()
		permissionAfterUpdateHooks = append(permissionAfterUpdateHooks, permissionHook)
		permissionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		permissionBeforeDeleteMu.Lock()
		permissionBeforeDeleteHooks = append(permissionBeforeDeleteHooks, permissionHook)
		permissionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		permissionAfterDeleteMu.Lock()
		permissionAfterDeleteHooks = append(permissionAfterDeleteHooks, permissionHook)
		permissionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		permissionBeforeUpsertMu.Lock()
		permissionBeforeUpsertHooks = append(permissionBeforeUpsertHooks, permissionHook)
		permissionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		permissionAfterUpsertMu.Lock()
		permissionAfterUpsertHooks = append(permissionAfterUpsertHooks, permissionHook)
		permissionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single permission record from the query using the global executor.
func (q permissionQuery) OneG(ctx context.Context) (*Permission, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single permission record from the query.
func (q permissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Permission, error) {
	o := &Permission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for permissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Permission records from the query using the global executor.
func (q permissionQuery) AllG(ctx context.Context) (PermissionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Permission records from the query.
func (q permissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PermissionSlice, error) {
	var o []*Permission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to Permission slice")
	}

	if len(permissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Permission records in the query using the global executor
func (q permissionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Permission records in the query.
func (q permissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count permissions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q permissionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q permissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if permissions exists")
	}

	return count > 0, nil
}

// IDConfig pointed to by the foreign key.
func (o *Permission) IDConfig(mods ...qm.QueryMod) configQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Configs(queryMods...)
}

// LoadIDConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (permissionL) LoadIDConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybePermission interface{}, mods queries.Applicator) error {
	var slice []*Permission
	var object *Permission

	if singular {
		var ok bool
		object, ok = maybePermission.(*Permission)
		if !ok {
			object = new(Permission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePermission))
			}
		}
	} else {
		s, ok := maybePermission.(*[]*Permission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &permissionR{}
		}
		args[object.ID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &permissionR{}
			}

			args[obj.ID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`saml_sp.config`),
		qm.WhereIn(`saml_sp.config.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Config")
	}

	var resultSlice []*Config
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config")
	}

	if len(configAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDConfig = foreign
		if foreign.R == nil {
			foreign.R = &configR{}
		}
		foreign.R.IDPermission = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.IDConfig = foreign
				if foreign.R == nil {
					foreign.R = &configR{}
				}
				foreign.R.IDPermission = local
				break
			}
		}
	}

	return nil
}

// SetIDConfigG of the permission to the related item.
// Sets o.R.IDConfig to related.
// Adds o to related.R.IDPermission.
// Uses the global database handle.
func (o *Permission) SetIDConfigG(ctx context.Context, insert bool, related *Config) error {
	return o.SetIDConfig(ctx, boil.GetContextDB(), insert, related)
}

// SetIDConfig of the permission to the related item.
// Sets o.R.IDConfig to related.
// Adds o to related.R.IDPermission.
func (o *Permission) SetIDConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Config) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"saml_sp\".\"permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
		strmangle.WhereClause("\"", "\"", 2, permissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ID = related.ID
	if o.R == nil {
		o.R = &permissionR{
			IDConfig: related,
		}
	} else {
		o.R.IDConfig = related
	}

	if related.R == nil {
		related.R = &configR{
			IDPermission: o,
		}
	} else {
		related.R.IDPermission = o
	}

	return nil
}

// Permissions retrieves all the records using an executor.
func Permissions(mods ...qm.QueryMod) permissionQuery {
	mods = append(mods, qm.From("\"saml_sp\".\"permissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"saml_sp\".\"permissions\".*"})
	}

	return permissionQuery{q}
}

// FindPermissionG retrieves a single record by ID.
func FindPermissionG(ctx context.Context, iD int32, selectCols ...string) (*Permission, error) {
	return FindPermission(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPermission(ctx context.Context, exec boil.ContextExecutor, iD int32, selectCols ...string) (*Permission, error) {
	permissionObj := &Permission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"saml_sp\".\"permissions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, permissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from permissions")
	}

	if err = permissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return permissionObj, err
	}

	return permissionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Permission) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Permission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no permissions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	permissionInsertCacheMut.RLock()
	cache, cached := permissionInsertCache[key]
	permissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			permissionAllColumns,
			permissionColumnsWithDefault,
			permissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(permissionType, permissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(permissionType, permissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"saml_sp\".\"permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"saml_sp\".\"permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into permissions")
	}

	if !cached {
		permissionInsertCacheMut.Lock()
		permissionInsertCache[key] = cache
		permissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Permission record using the global executor.
// See Update for more documentation.
func (o *Permission) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Permission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Permission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	permissionUpdateCacheMut.RLock()
	cache, cached := permissionUpdateCache[key]
	permissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			permissionAllColumns,
			permissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"saml_sp\".\"permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, permissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(permissionType, permissionMapping, append(wl, permissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for permissions")
	}

	if !cached {
		permissionUpdateCacheMut.Lock()
		permissionUpdateCache[key] = cache
		permissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q permissionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q permissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for permissions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PermissionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"saml_sp\".\"permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, permissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in permission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all permission")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Permission) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Permission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no permissions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	permissionUpsertCacheMut.RLock()
	cache, cached := permissionUpsertCache[key]
	permissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			permissionAllColumns,
			permissionColumnsWithDefault,
			permissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			permissionAllColumns,
			permissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert permissions, could not build update column list")
		}

		ret := strmangle.SetComplement(permissionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(permissionPrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert permissions, could not build conflict column list")
			}

			conflict = make([]string, len(permissionPrimaryKeyColumns))
			copy(conflict, permissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"saml_sp\".\"permissions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(permissionType, permissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(permissionType, permissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert permissions")
	}

	if !cached {
		permissionUpsertCacheMut.Lock()
		permissionUpsertCache[key] = cache
		permissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Permission record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Permission) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Permission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Permission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no Permission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), permissionPrimaryKeyMapping)
	sql := "DELETE FROM \"saml_sp\".\"permissions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for permissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q permissionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q permissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no permissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for permissions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PermissionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(permissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"saml_sp\".\"permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from permission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for permissions")
	}

	if len(permissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Permission) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no Permission provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Permission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPermission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PermissionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty PermissionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"saml_sp\".\"permissions\".* FROM \"saml_sp\".\"permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in PermissionSlice")
	}

	*o = slice

	return nil
}

// PermissionExistsG checks if the Permission row exists.
func PermissionExistsG(ctx context.Context, iD int32) (bool, error) {
	return PermissionExists(ctx, boil.GetContextDB(), iD)
}

// PermissionExists checks if the Permission row exists.
func PermissionExists(ctx context.Context, exec boil.ContextExecutor, iD int32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"saml_sp\".\"permissions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if permissions exists")
	}

	return exists, nil
}

// Exists checks if the Permission row exists.
func (o *Permission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PermissionExists(ctx, exec, o.ID)
}
