// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Config is an object representing the database table.
type Config struct {
	ID                       int32       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Enable                   bool        `boil:"enable" json:"enable" toml:"enable" yaml:"enable"`
	SPCertificate            string      `boil:"sp_certificate" json:"sp_certificate" toml:"sp_certificate" yaml:"sp_certificate"`
	SPPrivateKey             string      `boil:"sp_private_key" json:"sp_private_key" toml:"sp_private_key" yaml:"sp_private_key"`
	IdpMetadataURL           null.String `boil:"idp_metadata_url" json:"idp_metadata_url,omitempty" toml:"idp_metadata_url" yaml:"idp_metadata_url,omitempty"`
	MetadataXML              null.String `boil:"metadata_xml" json:"metadata_xml,omitempty" toml:"metadata_xml" yaml:"metadata_xml,omitempty"`
	OwnURL                   string      `boil:"own_url" json:"own_url" toml:"own_url" yaml:"own_url"`
	UserToArchive            bool        `boil:"user_to_archive" json:"user_to_archive" toml:"user_to_archive" yaml:"user_to_archive"`
	AllowInitializationByIdp bool        `boil:"allow_initialization_by_idp" json:"allow_initialization_by_idp" toml:"allow_initialization_by_idp" yaml:"allow_initialization_by_idp"`
	SignedRequest            bool        `boil:"signed_request" json:"signed_request" toml:"signed_request" yaml:"signed_request"`
	ForceAuthn               bool        `boil:"force_authn" json:"force_authn" toml:"force_authn" yaml:"force_authn"`
	EntityID                 string      `boil:"entity_id" json:"entity_id" toml:"entity_id" yaml:"entity_id"`
	CookieSecure             bool        `boil:"cookie_secure" json:"cookie_secure" toml:"cookie_secure" yaml:"cookie_secure"`
	LoginFailedURL           string      `boil:"login_failed_url" json:"login_failed_url" toml:"login_failed_url" yaml:"login_failed_url"`

	R *configR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigColumns = struct {
	ID                       string
	Enable                   string
	SPCertificate            string
	SPPrivateKey             string
	IdpMetadataURL           string
	MetadataXML              string
	OwnURL                   string
	UserToArchive            string
	AllowInitializationByIdp string
	SignedRequest            string
	ForceAuthn               string
	EntityID                 string
	CookieSecure             string
	LoginFailedURL           string
}{
	ID:                       "id",
	Enable:                   "enable",
	SPCertificate:            "sp_certificate",
	SPPrivateKey:             "sp_private_key",
	IdpMetadataURL:           "idp_metadata_url",
	MetadataXML:              "metadata_xml",
	OwnURL:                   "own_url",
	UserToArchive:            "user_to_archive",
	AllowInitializationByIdp: "allow_initialization_by_idp",
	SignedRequest:            "signed_request",
	ForceAuthn:               "force_authn",
	EntityID:                 "entity_id",
	CookieSecure:             "cookie_secure",
	LoginFailedURL:           "login_failed_url",
}

var ConfigTableColumns = struct {
	ID                       string
	Enable                   string
	SPCertificate            string
	SPPrivateKey             string
	IdpMetadataURL           string
	MetadataXML              string
	OwnURL                   string
	UserToArchive            string
	AllowInitializationByIdp string
	SignedRequest            string
	ForceAuthn               string
	EntityID                 string
	CookieSecure             string
	LoginFailedURL           string
}{
	ID:                       "config.id",
	Enable:                   "config.enable",
	SPCertificate:            "config.sp_certificate",
	SPPrivateKey:             "config.sp_private_key",
	IdpMetadataURL:           "config.idp_metadata_url",
	MetadataXML:              "config.metadata_xml",
	OwnURL:                   "config.own_url",
	UserToArchive:            "config.user_to_archive",
	AllowInitializationByIdp: "config.allow_initialization_by_idp",
	SignedRequest:            "config.signed_request",
	ForceAuthn:               "config.force_authn",
	EntityID:                 "config.entity_id",
	CookieSecure:             "config.cookie_secure",
	LoginFailedURL:           "config.login_failed_url",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ConfigWhere = struct {
	ID                       whereHelperint32
	Enable                   whereHelperbool
	SPCertificate            whereHelperstring
	SPPrivateKey             whereHelperstring
	IdpMetadataURL           whereHelpernull_String
	MetadataXML              whereHelpernull_String
	OwnURL                   whereHelperstring
	UserToArchive            whereHelperbool
	AllowInitializationByIdp whereHelperbool
	SignedRequest            whereHelperbool
	ForceAuthn               whereHelperbool
	EntityID                 whereHelperstring
	CookieSecure             whereHelperbool
	LoginFailedURL           whereHelperstring
}{
	ID:                       whereHelperint32{field: "\"saml_sp\".\"config\".\"id\""},
	Enable:                   whereHelperbool{field: "\"saml_sp\".\"config\".\"enable\""},
	SPCertificate:            whereHelperstring{field: "\"saml_sp\".\"config\".\"sp_certificate\""},
	SPPrivateKey:             whereHelperstring{field: "\"saml_sp\".\"config\".\"sp_private_key\""},
	IdpMetadataURL:           whereHelpernull_String{field: "\"saml_sp\".\"config\".\"idp_metadata_url\""},
	MetadataXML:              whereHelpernull_String{field: "\"saml_sp\".\"config\".\"metadata_xml\""},
	OwnURL:                   whereHelperstring{field: "\"saml_sp\".\"config\".\"own_url\""},
	UserToArchive:            whereHelperbool{field: "\"saml_sp\".\"config\".\"user_to_archive\""},
	AllowInitializationByIdp: whereHelperbool{field: "\"saml_sp\".\"config\".\"allow_initialization_by_idp\""},
	SignedRequest:            whereHelperbool{field: "\"saml_sp\".\"config\".\"signed_request\""},
	ForceAuthn:               whereHelperbool{field: "\"saml_sp\".\"config\".\"force_authn\""},
	EntityID:                 whereHelperstring{field: "\"saml_sp\".\"config\".\"entity_id\""},
	CookieSecure:             whereHelperbool{field: "\"saml_sp\".\"config\".\"cookie_secure\""},
	LoginFailedURL:           whereHelperstring{field: "\"saml_sp\".\"config\".\"login_failed_url\""},
}

// ConfigRels is where relationship names are stored.
var ConfigRels = struct {
	IDAttributeMap string
	IDPermission   string
}{
	IDAttributeMap: "IDAttributeMap",
	IDPermission:   "IDPermission",
}

// configR is where relationships are stored.
type configR struct {
	IDAttributeMap *AttributeMap `boil:"IDAttributeMap" json:"IDAttributeMap" toml:"IDAttributeMap" yaml:"IDAttributeMap"`
	IDPermission   *Permission   `boil:"IDPermission" json:"IDPermission" toml:"IDPermission" yaml:"IDPermission"`
}

// NewStruct creates a new relationship struct
func (*configR) NewStruct() *configR {
	return &configR{}
}

func (r *configR) GetIDAttributeMap() *AttributeMap {
	if r == nil {
		return nil
	}
	return r.IDAttributeMap
}

func (r *configR) GetIDPermission() *Permission {
	if r == nil {
		return nil
	}
	return r.IDPermission
}

// configL is where Load methods for each relationship are stored.
type configL struct{}

var (
	configAllColumns            = []string{"id", "enable", "sp_certificate", "sp_private_key", "idp_metadata_url", "metadata_xml", "own_url", "user_to_archive", "allow_initialization_by_idp", "signed_request", "force_authn", "entity_id", "cookie_secure", "login_failed_url"}
	configColumnsWithoutDefault = []string{"sp_certificate", "sp_private_key", "own_url"}
	configColumnsWithDefault    = []string{"id", "enable", "idp_metadata_url", "metadata_xml", "user_to_archive", "allow_initialization_by_idp", "signed_request", "force_authn", "entity_id", "cookie_secure", "login_failed_url"}
	configPrimaryKeyColumns     = []string{"id"}
	configGeneratedColumns      = []string{}
)

type (
	// ConfigSlice is an alias for a slice of pointers to Config.
	// This should almost always be used instead of []Config.
	ConfigSlice []*Config
	// ConfigHook is the signature for custom Config hook methods
	ConfigHook func(context.Context, boil.ContextExecutor, *Config) error

	configQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configType                 = reflect.TypeOf(&Config{})
	configMapping              = queries.MakeStructMapping(configType)
	configPrimaryKeyMapping, _ = queries.BindMapping(configType, configMapping, configPrimaryKeyColumns)
	configInsertCacheMut       sync.RWMutex
	configInsertCache          = make(map[string]insertCache)
	configUpdateCacheMut       sync.RWMutex
	configUpdateCache          = make(map[string]updateCache)
	configUpsertCacheMut       sync.RWMutex
	configUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configAfterSelectMu sync.Mutex
var configAfterSelectHooks []ConfigHook

var configBeforeInsertMu sync.Mutex
var configBeforeInsertHooks []ConfigHook
var configAfterInsertMu sync.Mutex
var configAfterInsertHooks []ConfigHook

var configBeforeUpdateMu sync.Mutex
var configBeforeUpdateHooks []ConfigHook
var configAfterUpdateMu sync.Mutex
var configAfterUpdateHooks []ConfigHook

var configBeforeDeleteMu sync.Mutex
var configBeforeDeleteHooks []ConfigHook
var configAfterDeleteMu sync.Mutex
var configAfterDeleteHooks []ConfigHook

var configBeforeUpsertMu sync.Mutex
var configBeforeUpsertHooks []ConfigHook
var configAfterUpsertMu sync.Mutex
var configAfterUpsertHooks []ConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Config) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Config) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Config) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Config) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Config) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Config) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Config) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Config) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Config) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigHook registers your hook function for all future operations.
func AddConfigHook(hookPoint boil.HookPoint, configHook ConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		configAfterSelectMu.Lock()
		configAfterSelectHooks = append(configAfterSelectHooks, configHook)
		configAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		configBeforeInsertMu.Lock()
		configBeforeInsertHooks = append(configBeforeInsertHooks, configHook)
		configBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		configAfterInsertMu.Lock()
		configAfterInsertHooks = append(configAfterInsertHooks, configHook)
		configAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		configBeforeUpdateMu.Lock()
		configBeforeUpdateHooks = append(configBeforeUpdateHooks, configHook)
		configBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		configAfterUpdateMu.Lock()
		configAfterUpdateHooks = append(configAfterUpdateHooks, configHook)
		configAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		configBeforeDeleteMu.Lock()
		configBeforeDeleteHooks = append(configBeforeDeleteHooks, configHook)
		configBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		configAfterDeleteMu.Lock()
		configAfterDeleteHooks = append(configAfterDeleteHooks, configHook)
		configAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		configBeforeUpsertMu.Lock()
		configBeforeUpsertHooks = append(configBeforeUpsertHooks, configHook)
		configBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		configAfterUpsertMu.Lock()
		configAfterUpsertHooks = append(configAfterUpsertHooks, configHook)
		configAfterUpsertMu.Unlock()
	}
}

// OneG returns a single config record from the query using the global executor.
func (q configQuery) OneG(ctx context.Context) (*Config, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single config record from the query.
func (q configQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Config, error) {
	o := &Config{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Config records from the query using the global executor.
func (q configQuery) AllG(ctx context.Context) (ConfigSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Config records from the query.
func (q configQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConfigSlice, error) {
	var o []*Config

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to Config slice")
	}

	if len(configAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Config records in the query using the global executor
func (q configQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Config records in the query.
func (q configQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count config rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q configQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q configQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if config exists")
	}

	return count > 0, nil
}

// IDAttributeMap pointed to by the foreign key.
func (o *Config) IDAttributeMap(mods ...qm.QueryMod) attributeMapQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return AttributeMaps(queryMods...)
}

// IDPermission pointed to by the foreign key.
func (o *Config) IDPermission(mods ...qm.QueryMod) permissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Permissions(queryMods...)
}

// LoadIDAttributeMap allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (configL) LoadIDAttributeMap(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfig interface{}, mods queries.Applicator) error {
	var slice []*Config
	var object *Config

	if singular {
		var ok bool
		object, ok = maybeConfig.(*Config)
		if !ok {
			object = new(Config)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeConfig))
			}
		}
	} else {
		s, ok := maybeConfig.(*[]*Config)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`saml_sp.attribute_map`),
		qm.WhereIn(`saml_sp.attribute_map.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributeMap")
	}

	var resultSlice []*AttributeMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributeMap")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_map")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_map")
	}

	if len(attributeMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDAttributeMap = foreign
		if foreign.R == nil {
			foreign.R = &attributeMapR{}
		}
		foreign.R.IDConfig = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.IDAttributeMap = foreign
				if foreign.R == nil {
					foreign.R = &attributeMapR{}
				}
				foreign.R.IDConfig = local
				break
			}
		}
	}

	return nil
}

// LoadIDPermission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (configL) LoadIDPermission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfig interface{}, mods queries.Applicator) error {
	var slice []*Config
	var object *Config

	if singular {
		var ok bool
		object, ok = maybeConfig.(*Config)
		if !ok {
			object = new(Config)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeConfig))
			}
		}
	} else {
		s, ok := maybeConfig.(*[]*Config)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`saml_sp.permissions`),
		qm.WhereIn(`saml_sp.permissions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Permission")
	}

	var resultSlice []*Permission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Permission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissions")
	}

	if len(permissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPermission = foreign
		if foreign.R == nil {
			foreign.R = &permissionR{}
		}
		foreign.R.IDConfig = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.IDPermission = foreign
				if foreign.R == nil {
					foreign.R = &permissionR{}
				}
				foreign.R.IDConfig = local
				break
			}
		}
	}

	return nil
}

// SetIDAttributeMapG of the config to the related item.
// Sets o.R.IDAttributeMap to related.
// Adds o to related.R.IDConfig.
// Uses the global database handle.
func (o *Config) SetIDAttributeMapG(ctx context.Context, insert bool, related *AttributeMap) error {
	return o.SetIDAttributeMap(ctx, boil.GetContextDB(), insert, related)
}

// SetIDAttributeMap of the config to the related item.
// Sets o.R.IDAttributeMap to related.
// Adds o to related.R.IDConfig.
func (o *Config) SetIDAttributeMap(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AttributeMap) error {
	var err error

	if insert {
		related.ID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"saml_sp\".\"attribute_map\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
			strmangle.WhereClause("\"", "\"", 2, attributeMapPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ID = o.ID
	}

	if o.R == nil {
		o.R = &configR{
			IDAttributeMap: related,
		}
	} else {
		o.R.IDAttributeMap = related
	}

	if related.R == nil {
		related.R = &attributeMapR{
			IDConfig: o,
		}
	} else {
		related.R.IDConfig = o
	}
	return nil
}

// SetIDPermissionG of the config to the related item.
// Sets o.R.IDPermission to related.
// Adds o to related.R.IDConfig.
// Uses the global database handle.
func (o *Config) SetIDPermissionG(ctx context.Context, insert bool, related *Permission) error {
	return o.SetIDPermission(ctx, boil.GetContextDB(), insert, related)
}

// SetIDPermission of the config to the related item.
// Sets o.R.IDPermission to related.
// Adds o to related.R.IDConfig.
func (o *Config) SetIDPermission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Permission) error {
	var err error

	if insert {
		related.ID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"saml_sp\".\"permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
			strmangle.WhereClause("\"", "\"", 2, permissionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ID = o.ID
	}

	if o.R == nil {
		o.R = &configR{
			IDPermission: related,
		}
	} else {
		o.R.IDPermission = related
	}

	if related.R == nil {
		related.R = &permissionR{
			IDConfig: o,
		}
	} else {
		related.R.IDConfig = o
	}
	return nil
}

// Configs retrieves all the records using an executor.
func Configs(mods ...qm.QueryMod) configQuery {
	mods = append(mods, qm.From("\"saml_sp\".\"config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"saml_sp\".\"config\".*"})
	}

	return configQuery{q}
}

// FindConfigG retrieves a single record by ID.
func FindConfigG(ctx context.Context, iD int32, selectCols ...string) (*Config, error) {
	return FindConfig(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfig(ctx context.Context, exec boil.ContextExecutor, iD int32, selectCols ...string) (*Config, error) {
	configObj := &Config{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"saml_sp\".\"config\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, configObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from config")
	}

	if err = configObj.doAfterSelectHooks(ctx, exec); err != nil {
		return configObj, err
	}

	return configObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Config) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Config) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configInsertCacheMut.RLock()
	cache, cached := configInsertCache[key]
	configInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configAllColumns,
			configColumnsWithDefault,
			configColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configType, configMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configType, configMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"saml_sp\".\"config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"saml_sp\".\"config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into config")
	}

	if !cached {
		configInsertCacheMut.Lock()
		configInsertCache[key] = cache
		configInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Config record using the global executor.
// See Update for more documentation.
func (o *Config) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Config.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Config) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configUpdateCacheMut.RLock()
	cache, cached := configUpdateCache[key]
	configUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configAllColumns,
			configPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"saml_sp\".\"config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configType, configMapping, append(wl, configPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for config")
	}

	if !cached {
		configUpdateCacheMut.Lock()
		configUpdateCache[key] = cache
		configUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q configQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q configQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for config")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ConfigSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"saml_sp\".\"config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in config slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all config")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Config) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Config) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no config provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configUpsertCacheMut.RLock()
	cache, cached := configUpsertCache[key]
	configUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			configAllColumns,
			configColumnsWithDefault,
			configColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			configAllColumns,
			configPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert config, could not build update column list")
		}

		ret := strmangle.SetComplement(configAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(configPrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert config, could not build conflict column list")
			}

			conflict = make([]string, len(configPrimaryKeyColumns))
			copy(conflict, configPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"saml_sp\".\"config\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(configType, configMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configType, configMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert config")
	}

	if !cached {
		configUpsertCacheMut.Lock()
		configUpsertCache[key] = cache
		configUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Config record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Config) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Config record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Config) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no Config provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configPrimaryKeyMapping)
	sql := "DELETE FROM \"saml_sp\".\"config\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q configQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q configQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no configQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for config")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ConfigSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"saml_sp\".\"config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from config slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for config")
	}

	if len(configAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Config) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no Config provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Config) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConfig(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty ConfigSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"saml_sp\".\"config\".* FROM \"saml_sp\".\"config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in ConfigSlice")
	}

	*o = slice

	return nil
}

// ConfigExistsG checks if the Config row exists.
func ConfigExistsG(ctx context.Context, iD int32) (bool, error) {
	return ConfigExists(ctx, boil.GetContextDB(), iD)
}

// ConfigExists checks if the Config row exists.
func ConfigExists(ctx context.Context, exec boil.ContextExecutor, iD int32) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"saml_sp\".\"config\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if config exists")
	}

	return exists, nil
}

// Exists checks if the Config row exists.
func (o *Config) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ConfigExists(ctx, exec, o.ID)
}
