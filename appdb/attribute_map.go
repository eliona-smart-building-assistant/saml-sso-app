// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AttributeMap is an object representing the database table.
type AttributeMap struct {
	Enable    bool        `boil:"enable" json:"enable" toml:"enable" yaml:"enable"`
	Email     string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	FirstName null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName  null.String `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	Phone     null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`

	R *attributeMapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeMapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeMapColumns = struct {
	Enable    string
	Email     string
	FirstName string
	LastName  string
	Phone     string
}{
	Enable:    "enable",
	Email:     "email",
	FirstName: "first_name",
	LastName:  "last_name",
	Phone:     "phone",
}

var AttributeMapTableColumns = struct {
	Enable    string
	Email     string
	FirstName string
	LastName  string
	Phone     string
}{
	Enable:    "attribute_map.enable",
	Email:     "attribute_map.email",
	FirstName: "attribute_map.first_name",
	LastName:  "attribute_map.last_name",
	Phone:     "attribute_map.phone",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AttributeMapWhere = struct {
	Enable    whereHelperbool
	Email     whereHelperstring
	FirstName whereHelpernull_String
	LastName  whereHelpernull_String
	Phone     whereHelpernull_String
}{
	Enable:    whereHelperbool{field: "\"saml_sp\".\"attribute_map\".\"enable\""},
	Email:     whereHelperstring{field: "\"saml_sp\".\"attribute_map\".\"email\""},
	FirstName: whereHelpernull_String{field: "\"saml_sp\".\"attribute_map\".\"first_name\""},
	LastName:  whereHelpernull_String{field: "\"saml_sp\".\"attribute_map\".\"last_name\""},
	Phone:     whereHelpernull_String{field: "\"saml_sp\".\"attribute_map\".\"phone\""},
}

// AttributeMapRels is where relationship names are stored.
var AttributeMapRels = struct {
	EnableBasicConfig string
}{
	EnableBasicConfig: "EnableBasicConfig",
}

// attributeMapR is where relationships are stored.
type attributeMapR struct {
	EnableBasicConfig *BasicConfig `boil:"EnableBasicConfig" json:"EnableBasicConfig" toml:"EnableBasicConfig" yaml:"EnableBasicConfig"`
}

// NewStruct creates a new relationship struct
func (*attributeMapR) NewStruct() *attributeMapR {
	return &attributeMapR{}
}

func (r *attributeMapR) GetEnableBasicConfig() *BasicConfig {
	if r == nil {
		return nil
	}
	return r.EnableBasicConfig
}

// attributeMapL is where Load methods for each relationship are stored.
type attributeMapL struct{}

var (
	attributeMapAllColumns            = []string{"enable", "email", "first_name", "last_name", "phone"}
	attributeMapColumnsWithoutDefault = []string{"enable"}
	attributeMapColumnsWithDefault    = []string{"email", "first_name", "last_name", "phone"}
	attributeMapPrimaryKeyColumns     = []string{"enable"}
	attributeMapGeneratedColumns      = []string{}
)

type (
	// AttributeMapSlice is an alias for a slice of pointers to AttributeMap.
	// This should almost always be used instead of []AttributeMap.
	AttributeMapSlice []*AttributeMap
	// AttributeMapHook is the signature for custom AttributeMap hook methods
	AttributeMapHook func(context.Context, boil.ContextExecutor, *AttributeMap) error

	attributeMapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeMapType                 = reflect.TypeOf(&AttributeMap{})
	attributeMapMapping              = queries.MakeStructMapping(attributeMapType)
	attributeMapPrimaryKeyMapping, _ = queries.BindMapping(attributeMapType, attributeMapMapping, attributeMapPrimaryKeyColumns)
	attributeMapInsertCacheMut       sync.RWMutex
	attributeMapInsertCache          = make(map[string]insertCache)
	attributeMapUpdateCacheMut       sync.RWMutex
	attributeMapUpdateCache          = make(map[string]updateCache)
	attributeMapUpsertCacheMut       sync.RWMutex
	attributeMapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attributeMapAfterSelectHooks []AttributeMapHook

var attributeMapBeforeInsertHooks []AttributeMapHook
var attributeMapAfterInsertHooks []AttributeMapHook

var attributeMapBeforeUpdateHooks []AttributeMapHook
var attributeMapAfterUpdateHooks []AttributeMapHook

var attributeMapBeforeDeleteHooks []AttributeMapHook
var attributeMapAfterDeleteHooks []AttributeMapHook

var attributeMapBeforeUpsertHooks []AttributeMapHook
var attributeMapAfterUpsertHooks []AttributeMapHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AttributeMap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AttributeMap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AttributeMap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AttributeMap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AttributeMap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AttributeMap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AttributeMap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AttributeMap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AttributeMap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeMapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttributeMapHook registers your hook function for all future operations.
func AddAttributeMapHook(hookPoint boil.HookPoint, attributeMapHook AttributeMapHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		attributeMapAfterSelectHooks = append(attributeMapAfterSelectHooks, attributeMapHook)
	case boil.BeforeInsertHook:
		attributeMapBeforeInsertHooks = append(attributeMapBeforeInsertHooks, attributeMapHook)
	case boil.AfterInsertHook:
		attributeMapAfterInsertHooks = append(attributeMapAfterInsertHooks, attributeMapHook)
	case boil.BeforeUpdateHook:
		attributeMapBeforeUpdateHooks = append(attributeMapBeforeUpdateHooks, attributeMapHook)
	case boil.AfterUpdateHook:
		attributeMapAfterUpdateHooks = append(attributeMapAfterUpdateHooks, attributeMapHook)
	case boil.BeforeDeleteHook:
		attributeMapBeforeDeleteHooks = append(attributeMapBeforeDeleteHooks, attributeMapHook)
	case boil.AfterDeleteHook:
		attributeMapAfterDeleteHooks = append(attributeMapAfterDeleteHooks, attributeMapHook)
	case boil.BeforeUpsertHook:
		attributeMapBeforeUpsertHooks = append(attributeMapBeforeUpsertHooks, attributeMapHook)
	case boil.AfterUpsertHook:
		attributeMapAfterUpsertHooks = append(attributeMapAfterUpsertHooks, attributeMapHook)
	}
}

// OneG returns a single attributeMap record from the query using the global executor.
func (q attributeMapQuery) OneG(ctx context.Context) (*AttributeMap, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single attributeMap record from the query.
func (q attributeMapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AttributeMap, error) {
	o := &AttributeMap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for attribute_map")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AttributeMap records from the query using the global executor.
func (q attributeMapQuery) AllG(ctx context.Context) (AttributeMapSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AttributeMap records from the query.
func (q attributeMapQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttributeMapSlice, error) {
	var o []*AttributeMap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to AttributeMap slice")
	}

	if len(attributeMapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AttributeMap records in the query using the global executor
func (q attributeMapQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AttributeMap records in the query.
func (q attributeMapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count attribute_map rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q attributeMapQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q attributeMapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if attribute_map exists")
	}

	return count > 0, nil
}

// EnableBasicConfig pointed to by the foreign key.
func (o *AttributeMap) EnableBasicConfig(mods ...qm.QueryMod) basicConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"enable\" = ?", o.Enable),
	}

	queryMods = append(queryMods, mods...)

	return BasicConfigs(queryMods...)
}

// LoadEnableBasicConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributeMapL) LoadEnableBasicConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeMap interface{}, mods queries.Applicator) error {
	var slice []*AttributeMap
	var object *AttributeMap

	if singular {
		var ok bool
		object, ok = maybeAttributeMap.(*AttributeMap)
		if !ok {
			object = new(AttributeMap)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeMap)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeMap))
			}
		}
	} else {
		s, ok := maybeAttributeMap.(*[]*AttributeMap)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeMap)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeMap))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeMapR{}
		}
		if !queries.IsNil(object.Enable) {
			args = append(args, object.Enable)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeMapR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Enable) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Enable) {
				args = append(args, obj.Enable)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`saml_sp.basic_config`),
		qm.WhereIn(`saml_sp.basic_config.enable in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BasicConfig")
	}

	var resultSlice []*BasicConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BasicConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for basic_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for basic_config")
	}

	if len(basicConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EnableBasicConfig = foreign
		if foreign.R == nil {
			foreign.R = &basicConfigR{}
		}
		foreign.R.EnableAttributeMap = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Enable, foreign.Enable) {
				local.R.EnableBasicConfig = foreign
				if foreign.R == nil {
					foreign.R = &basicConfigR{}
				}
				foreign.R.EnableAttributeMap = local
				break
			}
		}
	}

	return nil
}

// SetEnableBasicConfigG of the attributeMap to the related item.
// Sets o.R.EnableBasicConfig to related.
// Adds o to related.R.EnableAttributeMap.
// Uses the global database handle.
func (o *AttributeMap) SetEnableBasicConfigG(ctx context.Context, insert bool, related *BasicConfig) error {
	return o.SetEnableBasicConfig(ctx, boil.GetContextDB(), insert, related)
}

// SetEnableBasicConfig of the attributeMap to the related item.
// Sets o.R.EnableBasicConfig to related.
// Adds o to related.R.EnableAttributeMap.
func (o *AttributeMap) SetEnableBasicConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BasicConfig) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"saml_sp\".\"attribute_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"enable"}),
		strmangle.WhereClause("\"", "\"", 2, attributeMapPrimaryKeyColumns),
	)
	values := []interface{}{related.Enable, o.Enable}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Enable, related.Enable)
	if o.R == nil {
		o.R = &attributeMapR{
			EnableBasicConfig: related,
		}
	} else {
		o.R.EnableBasicConfig = related
	}

	if related.R == nil {
		related.R = &basicConfigR{
			EnableAttributeMap: o,
		}
	} else {
		related.R.EnableAttributeMap = o
	}

	return nil
}

// AttributeMaps retrieves all the records using an executor.
func AttributeMaps(mods ...qm.QueryMod) attributeMapQuery {
	mods = append(mods, qm.From("\"saml_sp\".\"attribute_map\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"saml_sp\".\"attribute_map\".*"})
	}

	return attributeMapQuery{q}
}

// FindAttributeMapG retrieves a single record by ID.
func FindAttributeMapG(ctx context.Context, enable bool, selectCols ...string) (*AttributeMap, error) {
	return FindAttributeMap(ctx, boil.GetContextDB(), enable, selectCols...)
}

// FindAttributeMap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributeMap(ctx context.Context, exec boil.ContextExecutor, enable bool, selectCols ...string) (*AttributeMap, error) {
	attributeMapObj := &AttributeMap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"saml_sp\".\"attribute_map\" where \"enable\"=$1", sel,
	)

	q := queries.Raw(query, enable)

	err := q.Bind(ctx, exec, attributeMapObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from attribute_map")
	}

	if err = attributeMapObj.doAfterSelectHooks(ctx, exec); err != nil {
		return attributeMapObj, err
	}

	return attributeMapObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AttributeMap) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributeMap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no attribute_map provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeMapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeMapInsertCacheMut.RLock()
	cache, cached := attributeMapInsertCache[key]
	attributeMapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeMapAllColumns,
			attributeMapColumnsWithDefault,
			attributeMapColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeMapType, attributeMapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeMapType, attributeMapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"saml_sp\".\"attribute_map\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"saml_sp\".\"attribute_map\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into attribute_map")
	}

	if !cached {
		attributeMapInsertCacheMut.Lock()
		attributeMapInsertCache[key] = cache
		attributeMapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AttributeMap record using the global executor.
// See Update for more documentation.
func (o *AttributeMap) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AttributeMap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributeMap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attributeMapUpdateCacheMut.RLock()
	cache, cached := attributeMapUpdateCache[key]
	attributeMapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeMapAllColumns,
			attributeMapPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update attribute_map, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"saml_sp\".\"attribute_map\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributeMapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeMapType, attributeMapMapping, append(wl, attributeMapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update attribute_map row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for attribute_map")
	}

	if !cached {
		attributeMapUpdateCacheMut.Lock()
		attributeMapUpdateCache[key] = cache
		attributeMapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q attributeMapQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q attributeMapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for attribute_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for attribute_map")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AttributeMapSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeMapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"saml_sp\".\"attribute_map\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributeMapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in attributeMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all attributeMap")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AttributeMap) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributeMap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no attribute_map provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeMapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeMapUpsertCacheMut.RLock()
	cache, cached := attributeMapUpsertCache[key]
	attributeMapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributeMapAllColumns,
			attributeMapColumnsWithDefault,
			attributeMapColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributeMapAllColumns,
			attributeMapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert attribute_map, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributeMapPrimaryKeyColumns))
			copy(conflict, attributeMapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"saml_sp\".\"attribute_map\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributeMapType, attributeMapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeMapType, attributeMapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert attribute_map")
	}

	if !cached {
		attributeMapUpsertCacheMut.Lock()
		attributeMapUpsertCache[key] = cache
		attributeMapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AttributeMap record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AttributeMap) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AttributeMap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributeMap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no AttributeMap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributeMapPrimaryKeyMapping)
	sql := "DELETE FROM \"saml_sp\".\"attribute_map\" WHERE \"enable\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from attribute_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for attribute_map")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q attributeMapQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q attributeMapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no attributeMapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from attribute_map")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for attribute_map")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AttributeMapSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeMapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attributeMapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"saml_sp\".\"attribute_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeMapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from attributeMap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for attribute_map")
	}

	if len(attributeMapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AttributeMap) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no AttributeMap provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributeMap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttributeMap(ctx, exec, o.Enable)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeMapSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty AttributeMapSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeMapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeMapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"saml_sp\".\"attribute_map\".* FROM \"saml_sp\".\"attribute_map\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeMapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in AttributeMapSlice")
	}

	*o = slice

	return nil
}

// AttributeMapExistsG checks if the AttributeMap row exists.
func AttributeMapExistsG(ctx context.Context, enable bool) (bool, error) {
	return AttributeMapExists(ctx, boil.GetContextDB(), enable)
}

// AttributeMapExists checks if the AttributeMap row exists.
func AttributeMapExists(ctx context.Context, exec boil.ContextExecutor, enable bool) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"saml_sp\".\"attribute_map\" where \"enable\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, enable)
	}
	row := exec.QueryRowContext(ctx, sql, enable)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if attribute_map exists")
	}

	return exists, nil
}

// Exists checks if the AttributeMap row exists.
func (o *AttributeMap) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AttributeMapExists(ctx, exec, o.Enable)
}
