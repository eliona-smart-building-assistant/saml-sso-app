// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BasicConfig is an object representing the database table.
type BasicConfig struct {
	Enable         bool        `boil:"enable" json:"enable" toml:"enable" yaml:"enable"`
	SPCertificate  string      `boil:"sp_certificate" json:"sp_certificate" toml:"sp_certificate" yaml:"sp_certificate"`
	SPPrivateKey   string      `boil:"sp_private_key" json:"sp_private_key" toml:"sp_private_key" yaml:"sp_private_key"`
	IdpMetadataURL null.String `boil:"idp_metadata_url" json:"idp_metadata_url,omitempty" toml:"idp_metadata_url" yaml:"idp_metadata_url,omitempty"`
	MetadataXML    null.String `boil:"metadata_xml" json:"metadata_xml,omitempty" toml:"metadata_xml" yaml:"metadata_xml,omitempty"`
	OwnURL         string      `boil:"own_url" json:"own_url" toml:"own_url" yaml:"own_url"`
	UserToArchive  bool        `boil:"user_to_archive" json:"user_to_archive" toml:"user_to_archive" yaml:"user_to_archive"`

	R *basicConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L basicConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BasicConfigColumns = struct {
	Enable         string
	SPCertificate  string
	SPPrivateKey   string
	IdpMetadataURL string
	MetadataXML    string
	OwnURL         string
	UserToArchive  string
}{
	Enable:         "enable",
	SPCertificate:  "sp_certificate",
	SPPrivateKey:   "sp_private_key",
	IdpMetadataURL: "idp_metadata_url",
	MetadataXML:    "metadata_xml",
	OwnURL:         "own_url",
	UserToArchive:  "user_to_archive",
}

var BasicConfigTableColumns = struct {
	Enable         string
	SPCertificate  string
	SPPrivateKey   string
	IdpMetadataURL string
	MetadataXML    string
	OwnURL         string
	UserToArchive  string
}{
	Enable:         "basic_config.enable",
	SPCertificate:  "basic_config.sp_certificate",
	SPPrivateKey:   "basic_config.sp_private_key",
	IdpMetadataURL: "basic_config.idp_metadata_url",
	MetadataXML:    "basic_config.metadata_xml",
	OwnURL:         "basic_config.own_url",
	UserToArchive:  "basic_config.user_to_archive",
}

// Generated where

var BasicConfigWhere = struct {
	Enable         whereHelperbool
	SPCertificate  whereHelperstring
	SPPrivateKey   whereHelperstring
	IdpMetadataURL whereHelpernull_String
	MetadataXML    whereHelpernull_String
	OwnURL         whereHelperstring
	UserToArchive  whereHelperbool
}{
	Enable:         whereHelperbool{field: "\"saml_sp\".\"basic_config\".\"enable\""},
	SPCertificate:  whereHelperstring{field: "\"saml_sp\".\"basic_config\".\"sp_certificate\""},
	SPPrivateKey:   whereHelperstring{field: "\"saml_sp\".\"basic_config\".\"sp_private_key\""},
	IdpMetadataURL: whereHelpernull_String{field: "\"saml_sp\".\"basic_config\".\"idp_metadata_url\""},
	MetadataXML:    whereHelpernull_String{field: "\"saml_sp\".\"basic_config\".\"metadata_xml\""},
	OwnURL:         whereHelperstring{field: "\"saml_sp\".\"basic_config\".\"own_url\""},
	UserToArchive:  whereHelperbool{field: "\"saml_sp\".\"basic_config\".\"user_to_archive\""},
}

// BasicConfigRels is where relationship names are stored.
var BasicConfigRels = struct {
	EnableAdvancedConfig string
	EnableAttributeMap   string
	EnablePermission     string
}{
	EnableAdvancedConfig: "EnableAdvancedConfig",
	EnableAttributeMap:   "EnableAttributeMap",
	EnablePermission:     "EnablePermission",
}

// basicConfigR is where relationships are stored.
type basicConfigR struct {
	EnableAdvancedConfig *AdvancedConfig `boil:"EnableAdvancedConfig" json:"EnableAdvancedConfig" toml:"EnableAdvancedConfig" yaml:"EnableAdvancedConfig"`
	EnableAttributeMap   *AttributeMap   `boil:"EnableAttributeMap" json:"EnableAttributeMap" toml:"EnableAttributeMap" yaml:"EnableAttributeMap"`
	EnablePermission     *Permission     `boil:"EnablePermission" json:"EnablePermission" toml:"EnablePermission" yaml:"EnablePermission"`
}

// NewStruct creates a new relationship struct
func (*basicConfigR) NewStruct() *basicConfigR {
	return &basicConfigR{}
}

func (r *basicConfigR) GetEnableAdvancedConfig() *AdvancedConfig {
	if r == nil {
		return nil
	}
	return r.EnableAdvancedConfig
}

func (r *basicConfigR) GetEnableAttributeMap() *AttributeMap {
	if r == nil {
		return nil
	}
	return r.EnableAttributeMap
}

func (r *basicConfigR) GetEnablePermission() *Permission {
	if r == nil {
		return nil
	}
	return r.EnablePermission
}

// basicConfigL is where Load methods for each relationship are stored.
type basicConfigL struct{}

var (
	basicConfigAllColumns            = []string{"enable", "sp_certificate", "sp_private_key", "idp_metadata_url", "metadata_xml", "own_url", "user_to_archive"}
	basicConfigColumnsWithoutDefault = []string{"sp_certificate", "sp_private_key", "own_url"}
	basicConfigColumnsWithDefault    = []string{"enable", "idp_metadata_url", "metadata_xml", "user_to_archive"}
	basicConfigPrimaryKeyColumns     = []string{"enable"}
	basicConfigGeneratedColumns      = []string{}
)

type (
	// BasicConfigSlice is an alias for a slice of pointers to BasicConfig.
	// This should almost always be used instead of []BasicConfig.
	BasicConfigSlice []*BasicConfig
	// BasicConfigHook is the signature for custom BasicConfig hook methods
	BasicConfigHook func(context.Context, boil.ContextExecutor, *BasicConfig) error

	basicConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	basicConfigType                 = reflect.TypeOf(&BasicConfig{})
	basicConfigMapping              = queries.MakeStructMapping(basicConfigType)
	basicConfigPrimaryKeyMapping, _ = queries.BindMapping(basicConfigType, basicConfigMapping, basicConfigPrimaryKeyColumns)
	basicConfigInsertCacheMut       sync.RWMutex
	basicConfigInsertCache          = make(map[string]insertCache)
	basicConfigUpdateCacheMut       sync.RWMutex
	basicConfigUpdateCache          = make(map[string]updateCache)
	basicConfigUpsertCacheMut       sync.RWMutex
	basicConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var basicConfigAfterSelectHooks []BasicConfigHook

var basicConfigBeforeInsertHooks []BasicConfigHook
var basicConfigAfterInsertHooks []BasicConfigHook

var basicConfigBeforeUpdateHooks []BasicConfigHook
var basicConfigAfterUpdateHooks []BasicConfigHook

var basicConfigBeforeDeleteHooks []BasicConfigHook
var basicConfigAfterDeleteHooks []BasicConfigHook

var basicConfigBeforeUpsertHooks []BasicConfigHook
var basicConfigAfterUpsertHooks []BasicConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BasicConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BasicConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BasicConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BasicConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BasicConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BasicConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BasicConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BasicConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BasicConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range basicConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBasicConfigHook registers your hook function for all future operations.
func AddBasicConfigHook(hookPoint boil.HookPoint, basicConfigHook BasicConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		basicConfigAfterSelectHooks = append(basicConfigAfterSelectHooks, basicConfigHook)
	case boil.BeforeInsertHook:
		basicConfigBeforeInsertHooks = append(basicConfigBeforeInsertHooks, basicConfigHook)
	case boil.AfterInsertHook:
		basicConfigAfterInsertHooks = append(basicConfigAfterInsertHooks, basicConfigHook)
	case boil.BeforeUpdateHook:
		basicConfigBeforeUpdateHooks = append(basicConfigBeforeUpdateHooks, basicConfigHook)
	case boil.AfterUpdateHook:
		basicConfigAfterUpdateHooks = append(basicConfigAfterUpdateHooks, basicConfigHook)
	case boil.BeforeDeleteHook:
		basicConfigBeforeDeleteHooks = append(basicConfigBeforeDeleteHooks, basicConfigHook)
	case boil.AfterDeleteHook:
		basicConfigAfterDeleteHooks = append(basicConfigAfterDeleteHooks, basicConfigHook)
	case boil.BeforeUpsertHook:
		basicConfigBeforeUpsertHooks = append(basicConfigBeforeUpsertHooks, basicConfigHook)
	case boil.AfterUpsertHook:
		basicConfigAfterUpsertHooks = append(basicConfigAfterUpsertHooks, basicConfigHook)
	}
}

// OneG returns a single basicConfig record from the query using the global executor.
func (q basicConfigQuery) OneG(ctx context.Context) (*BasicConfig, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single basicConfig record from the query.
func (q basicConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BasicConfig, error) {
	o := &BasicConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for basic_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BasicConfig records from the query using the global executor.
func (q basicConfigQuery) AllG(ctx context.Context) (BasicConfigSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BasicConfig records from the query.
func (q basicConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (BasicConfigSlice, error) {
	var o []*BasicConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to BasicConfig slice")
	}

	if len(basicConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BasicConfig records in the query using the global executor
func (q basicConfigQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BasicConfig records in the query.
func (q basicConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count basic_config rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q basicConfigQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q basicConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if basic_config exists")
	}

	return count > 0, nil
}

// EnableAdvancedConfig pointed to by the foreign key.
func (o *BasicConfig) EnableAdvancedConfig(mods ...qm.QueryMod) advancedConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"enable\" = ?", o.Enable),
	}

	queryMods = append(queryMods, mods...)

	return AdvancedConfigs(queryMods...)
}

// EnableAttributeMap pointed to by the foreign key.
func (o *BasicConfig) EnableAttributeMap(mods ...qm.QueryMod) attributeMapQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"enable\" = ?", o.Enable),
	}

	queryMods = append(queryMods, mods...)

	return AttributeMaps(queryMods...)
}

// EnablePermission pointed to by the foreign key.
func (o *BasicConfig) EnablePermission(mods ...qm.QueryMod) permissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"enable\" = ?", o.Enable),
	}

	queryMods = append(queryMods, mods...)

	return Permissions(queryMods...)
}

// LoadEnableAdvancedConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (basicConfigL) LoadEnableAdvancedConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBasicConfig interface{}, mods queries.Applicator) error {
	var slice []*BasicConfig
	var object *BasicConfig

	if singular {
		var ok bool
		object, ok = maybeBasicConfig.(*BasicConfig)
		if !ok {
			object = new(BasicConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBasicConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBasicConfig))
			}
		}
	} else {
		s, ok := maybeBasicConfig.(*[]*BasicConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBasicConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBasicConfig))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &basicConfigR{}
		}
		args = append(args, object.Enable)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &basicConfigR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Enable) {
					continue Outer
				}
			}

			args = append(args, obj.Enable)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`saml_sp.advanced_config`),
		qm.WhereIn(`saml_sp.advanced_config.enable in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AdvancedConfig")
	}

	var resultSlice []*AdvancedConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AdvancedConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for advanced_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for advanced_config")
	}

	if len(advancedConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EnableAdvancedConfig = foreign
		if foreign.R == nil {
			foreign.R = &advancedConfigR{}
		}
		foreign.R.EnableBasicConfig = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Enable, foreign.Enable) {
				local.R.EnableAdvancedConfig = foreign
				if foreign.R == nil {
					foreign.R = &advancedConfigR{}
				}
				foreign.R.EnableBasicConfig = local
				break
			}
		}
	}

	return nil
}

// LoadEnableAttributeMap allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (basicConfigL) LoadEnableAttributeMap(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBasicConfig interface{}, mods queries.Applicator) error {
	var slice []*BasicConfig
	var object *BasicConfig

	if singular {
		var ok bool
		object, ok = maybeBasicConfig.(*BasicConfig)
		if !ok {
			object = new(BasicConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBasicConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBasicConfig))
			}
		}
	} else {
		s, ok := maybeBasicConfig.(*[]*BasicConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBasicConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBasicConfig))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &basicConfigR{}
		}
		args = append(args, object.Enable)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &basicConfigR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Enable) {
					continue Outer
				}
			}

			args = append(args, obj.Enable)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`saml_sp.attribute_map`),
		qm.WhereIn(`saml_sp.attribute_map.enable in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributeMap")
	}

	var resultSlice []*AttributeMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributeMap")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_map")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_map")
	}

	if len(attributeMapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EnableAttributeMap = foreign
		if foreign.R == nil {
			foreign.R = &attributeMapR{}
		}
		foreign.R.EnableBasicConfig = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Enable, foreign.Enable) {
				local.R.EnableAttributeMap = foreign
				if foreign.R == nil {
					foreign.R = &attributeMapR{}
				}
				foreign.R.EnableBasicConfig = local
				break
			}
		}
	}

	return nil
}

// LoadEnablePermission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (basicConfigL) LoadEnablePermission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBasicConfig interface{}, mods queries.Applicator) error {
	var slice []*BasicConfig
	var object *BasicConfig

	if singular {
		var ok bool
		object, ok = maybeBasicConfig.(*BasicConfig)
		if !ok {
			object = new(BasicConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBasicConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBasicConfig))
			}
		}
	} else {
		s, ok := maybeBasicConfig.(*[]*BasicConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBasicConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBasicConfig))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &basicConfigR{}
		}
		args = append(args, object.Enable)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &basicConfigR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Enable) {
					continue Outer
				}
			}

			args = append(args, obj.Enable)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`saml_sp.permissions`),
		qm.WhereIn(`saml_sp.permissions.enable in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Permission")
	}

	var resultSlice []*Permission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Permission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissions")
	}

	if len(permissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EnablePermission = foreign
		if foreign.R == nil {
			foreign.R = &permissionR{}
		}
		foreign.R.EnableBasicConfig = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Enable, foreign.Enable) {
				local.R.EnablePermission = foreign
				if foreign.R == nil {
					foreign.R = &permissionR{}
				}
				foreign.R.EnableBasicConfig = local
				break
			}
		}
	}

	return nil
}

// SetEnableAdvancedConfigG of the basicConfig to the related item.
// Sets o.R.EnableAdvancedConfig to related.
// Adds o to related.R.EnableBasicConfig.
// Uses the global database handle.
func (o *BasicConfig) SetEnableAdvancedConfigG(ctx context.Context, insert bool, related *AdvancedConfig) error {
	return o.SetEnableAdvancedConfig(ctx, boil.GetContextDB(), insert, related)
}

// SetEnableAdvancedConfig of the basicConfig to the related item.
// Sets o.R.EnableAdvancedConfig to related.
// Adds o to related.R.EnableBasicConfig.
func (o *BasicConfig) SetEnableAdvancedConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AdvancedConfig) error {
	var err error

	if insert {
		queries.Assign(&related.Enable, o.Enable)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"saml_sp\".\"advanced_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"enable"}),
			strmangle.WhereClause("\"", "\"", 2, advancedConfigPrimaryKeyColumns),
		)
		values := []interface{}{o.Enable, related.Enable}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.Enable, o.Enable)
	}

	if o.R == nil {
		o.R = &basicConfigR{
			EnableAdvancedConfig: related,
		}
	} else {
		o.R.EnableAdvancedConfig = related
	}

	if related.R == nil {
		related.R = &advancedConfigR{
			EnableBasicConfig: o,
		}
	} else {
		related.R.EnableBasicConfig = o
	}
	return nil
}

// SetEnableAttributeMapG of the basicConfig to the related item.
// Sets o.R.EnableAttributeMap to related.
// Adds o to related.R.EnableBasicConfig.
// Uses the global database handle.
func (o *BasicConfig) SetEnableAttributeMapG(ctx context.Context, insert bool, related *AttributeMap) error {
	return o.SetEnableAttributeMap(ctx, boil.GetContextDB(), insert, related)
}

// SetEnableAttributeMap of the basicConfig to the related item.
// Sets o.R.EnableAttributeMap to related.
// Adds o to related.R.EnableBasicConfig.
func (o *BasicConfig) SetEnableAttributeMap(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AttributeMap) error {
	var err error

	if insert {
		queries.Assign(&related.Enable, o.Enable)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"saml_sp\".\"attribute_map\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"enable"}),
			strmangle.WhereClause("\"", "\"", 2, attributeMapPrimaryKeyColumns),
		)
		values := []interface{}{o.Enable, related.Enable}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.Enable, o.Enable)
	}

	if o.R == nil {
		o.R = &basicConfigR{
			EnableAttributeMap: related,
		}
	} else {
		o.R.EnableAttributeMap = related
	}

	if related.R == nil {
		related.R = &attributeMapR{
			EnableBasicConfig: o,
		}
	} else {
		related.R.EnableBasicConfig = o
	}
	return nil
}

// SetEnablePermissionG of the basicConfig to the related item.
// Sets o.R.EnablePermission to related.
// Adds o to related.R.EnableBasicConfig.
// Uses the global database handle.
func (o *BasicConfig) SetEnablePermissionG(ctx context.Context, insert bool, related *Permission) error {
	return o.SetEnablePermission(ctx, boil.GetContextDB(), insert, related)
}

// SetEnablePermission of the basicConfig to the related item.
// Sets o.R.EnablePermission to related.
// Adds o to related.R.EnableBasicConfig.
func (o *BasicConfig) SetEnablePermission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Permission) error {
	var err error

	if insert {
		queries.Assign(&related.Enable, o.Enable)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"saml_sp\".\"permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"enable"}),
			strmangle.WhereClause("\"", "\"", 2, permissionPrimaryKeyColumns),
		)
		values := []interface{}{o.Enable, related.Enable}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.Enable, o.Enable)
	}

	if o.R == nil {
		o.R = &basicConfigR{
			EnablePermission: related,
		}
	} else {
		o.R.EnablePermission = related
	}

	if related.R == nil {
		related.R = &permissionR{
			EnableBasicConfig: o,
		}
	} else {
		related.R.EnableBasicConfig = o
	}
	return nil
}

// BasicConfigs retrieves all the records using an executor.
func BasicConfigs(mods ...qm.QueryMod) basicConfigQuery {
	mods = append(mods, qm.From("\"saml_sp\".\"basic_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"saml_sp\".\"basic_config\".*"})
	}

	return basicConfigQuery{q}
}

// FindBasicConfigG retrieves a single record by ID.
func FindBasicConfigG(ctx context.Context, enable bool, selectCols ...string) (*BasicConfig, error) {
	return FindBasicConfig(ctx, boil.GetContextDB(), enable, selectCols...)
}

// FindBasicConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBasicConfig(ctx context.Context, exec boil.ContextExecutor, enable bool, selectCols ...string) (*BasicConfig, error) {
	basicConfigObj := &BasicConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"saml_sp\".\"basic_config\" where \"enable\"=$1", sel,
	)

	q := queries.Raw(query, enable)

	err := q.Bind(ctx, exec, basicConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from basic_config")
	}

	if err = basicConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return basicConfigObj, err
	}

	return basicConfigObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BasicConfig) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BasicConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no basic_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(basicConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	basicConfigInsertCacheMut.RLock()
	cache, cached := basicConfigInsertCache[key]
	basicConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			basicConfigAllColumns,
			basicConfigColumnsWithDefault,
			basicConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(basicConfigType, basicConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(basicConfigType, basicConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"saml_sp\".\"basic_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"saml_sp\".\"basic_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into basic_config")
	}

	if !cached {
		basicConfigInsertCacheMut.Lock()
		basicConfigInsertCache[key] = cache
		basicConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BasicConfig record using the global executor.
// See Update for more documentation.
func (o *BasicConfig) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BasicConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BasicConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	basicConfigUpdateCacheMut.RLock()
	cache, cached := basicConfigUpdateCache[key]
	basicConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			basicConfigAllColumns,
			basicConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update basic_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"saml_sp\".\"basic_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, basicConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(basicConfigType, basicConfigMapping, append(wl, basicConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update basic_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for basic_config")
	}

	if !cached {
		basicConfigUpdateCacheMut.Lock()
		basicConfigUpdateCache[key] = cache
		basicConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q basicConfigQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q basicConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for basic_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for basic_config")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BasicConfigSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BasicConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), basicConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"saml_sp\".\"basic_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, basicConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in basicConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all basicConfig")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BasicConfig) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BasicConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no basic_config provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(basicConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	basicConfigUpsertCacheMut.RLock()
	cache, cached := basicConfigUpsertCache[key]
	basicConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			basicConfigAllColumns,
			basicConfigColumnsWithDefault,
			basicConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			basicConfigAllColumns,
			basicConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert basic_config, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(basicConfigPrimaryKeyColumns))
			copy(conflict, basicConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"saml_sp\".\"basic_config\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(basicConfigType, basicConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(basicConfigType, basicConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert basic_config")
	}

	if !cached {
		basicConfigUpsertCacheMut.Lock()
		basicConfigUpsertCache[key] = cache
		basicConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BasicConfig record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BasicConfig) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BasicConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BasicConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no BasicConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), basicConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"saml_sp\".\"basic_config\" WHERE \"enable\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from basic_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for basic_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q basicConfigQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q basicConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no basicConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from basic_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for basic_config")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BasicConfigSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BasicConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(basicConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), basicConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"saml_sp\".\"basic_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, basicConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from basicConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for basic_config")
	}

	if len(basicConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BasicConfig) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no BasicConfig provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BasicConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBasicConfig(ctx, exec, o.Enable)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BasicConfigSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty BasicConfigSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BasicConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BasicConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), basicConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"saml_sp\".\"basic_config\".* FROM \"saml_sp\".\"basic_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, basicConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in BasicConfigSlice")
	}

	*o = slice

	return nil
}

// BasicConfigExistsG checks if the BasicConfig row exists.
func BasicConfigExistsG(ctx context.Context, enable bool) (bool, error) {
	return BasicConfigExists(ctx, boil.GetContextDB(), enable)
}

// BasicConfigExists checks if the BasicConfig row exists.
func BasicConfigExists(ctx context.Context, exec boil.ContextExecutor, enable bool) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"saml_sp\".\"basic_config\" where \"enable\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, enable)
	}
	row := exec.QueryRowContext(ctx, sql, enable)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if basic_config exists")
	}

	return exists, nil
}

// Exists checks if the BasicConfig row exists.
func (o *BasicConfig) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BasicConfigExists(ctx, exec, o.Enable)
}
