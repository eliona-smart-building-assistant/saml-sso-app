// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AdvancedConfig is an object representing the database table.
type AdvancedConfig struct {
	Enable                   bool   `boil:"enable" json:"enable" toml:"enable" yaml:"enable"`
	AllowInitializationByIdp bool   `boil:"allow_initialization_by_idp" json:"allow_initialization_by_idp" toml:"allow_initialization_by_idp" yaml:"allow_initialization_by_idp"`
	SignedRequest            bool   `boil:"signed_request" json:"signed_request" toml:"signed_request" yaml:"signed_request"`
	ForceAuthn               bool   `boil:"force_authn" json:"force_authn" toml:"force_authn" yaml:"force_authn"`
	EntityID                 string `boil:"entity_id" json:"entity_id" toml:"entity_id" yaml:"entity_id"`
	CookieSecure             bool   `boil:"cookie_secure" json:"cookie_secure" toml:"cookie_secure" yaml:"cookie_secure"`
	LoginFailedURL           string `boil:"login_failed_url" json:"login_failed_url" toml:"login_failed_url" yaml:"login_failed_url"`

	R *advancedConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L advancedConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdvancedConfigColumns = struct {
	Enable                   string
	AllowInitializationByIdp string
	SignedRequest            string
	ForceAuthn               string
	EntityID                 string
	CookieSecure             string
	LoginFailedURL           string
}{
	Enable:                   "enable",
	AllowInitializationByIdp: "allow_initialization_by_idp",
	SignedRequest:            "signed_request",
	ForceAuthn:               "force_authn",
	EntityID:                 "entity_id",
	CookieSecure:             "cookie_secure",
	LoginFailedURL:           "login_failed_url",
}

var AdvancedConfigTableColumns = struct {
	Enable                   string
	AllowInitializationByIdp string
	SignedRequest            string
	ForceAuthn               string
	EntityID                 string
	CookieSecure             string
	LoginFailedURL           string
}{
	Enable:                   "advanced_config.enable",
	AllowInitializationByIdp: "advanced_config.allow_initialization_by_idp",
	SignedRequest:            "advanced_config.signed_request",
	ForceAuthn:               "advanced_config.force_authn",
	EntityID:                 "advanced_config.entity_id",
	CookieSecure:             "advanced_config.cookie_secure",
	LoginFailedURL:           "advanced_config.login_failed_url",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AdvancedConfigWhere = struct {
	Enable                   whereHelperbool
	AllowInitializationByIdp whereHelperbool
	SignedRequest            whereHelperbool
	ForceAuthn               whereHelperbool
	EntityID                 whereHelperstring
	CookieSecure             whereHelperbool
	LoginFailedURL           whereHelperstring
}{
	Enable:                   whereHelperbool{field: "\"saml_sp\".\"advanced_config\".\"enable\""},
	AllowInitializationByIdp: whereHelperbool{field: "\"saml_sp\".\"advanced_config\".\"allow_initialization_by_idp\""},
	SignedRequest:            whereHelperbool{field: "\"saml_sp\".\"advanced_config\".\"signed_request\""},
	ForceAuthn:               whereHelperbool{field: "\"saml_sp\".\"advanced_config\".\"force_authn\""},
	EntityID:                 whereHelperstring{field: "\"saml_sp\".\"advanced_config\".\"entity_id\""},
	CookieSecure:             whereHelperbool{field: "\"saml_sp\".\"advanced_config\".\"cookie_secure\""},
	LoginFailedURL:           whereHelperstring{field: "\"saml_sp\".\"advanced_config\".\"login_failed_url\""},
}

// AdvancedConfigRels is where relationship names are stored.
var AdvancedConfigRels = struct {
	EnableBasicConfig string
}{
	EnableBasicConfig: "EnableBasicConfig",
}

// advancedConfigR is where relationships are stored.
type advancedConfigR struct {
	EnableBasicConfig *BasicConfig `boil:"EnableBasicConfig" json:"EnableBasicConfig" toml:"EnableBasicConfig" yaml:"EnableBasicConfig"`
}

// NewStruct creates a new relationship struct
func (*advancedConfigR) NewStruct() *advancedConfigR {
	return &advancedConfigR{}
}

func (r *advancedConfigR) GetEnableBasicConfig() *BasicConfig {
	if r == nil {
		return nil
	}
	return r.EnableBasicConfig
}

// advancedConfigL is where Load methods for each relationship are stored.
type advancedConfigL struct{}

var (
	advancedConfigAllColumns            = []string{"enable", "allow_initialization_by_idp", "signed_request", "force_authn", "entity_id", "cookie_secure", "login_failed_url"}
	advancedConfigColumnsWithoutDefault = []string{"enable"}
	advancedConfigColumnsWithDefault    = []string{"allow_initialization_by_idp", "signed_request", "force_authn", "entity_id", "cookie_secure", "login_failed_url"}
	advancedConfigPrimaryKeyColumns     = []string{"enable"}
	advancedConfigGeneratedColumns      = []string{}
)

type (
	// AdvancedConfigSlice is an alias for a slice of pointers to AdvancedConfig.
	// This should almost always be used instead of []AdvancedConfig.
	AdvancedConfigSlice []*AdvancedConfig
	// AdvancedConfigHook is the signature for custom AdvancedConfig hook methods
	AdvancedConfigHook func(context.Context, boil.ContextExecutor, *AdvancedConfig) error

	advancedConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	advancedConfigType                 = reflect.TypeOf(&AdvancedConfig{})
	advancedConfigMapping              = queries.MakeStructMapping(advancedConfigType)
	advancedConfigPrimaryKeyMapping, _ = queries.BindMapping(advancedConfigType, advancedConfigMapping, advancedConfigPrimaryKeyColumns)
	advancedConfigInsertCacheMut       sync.RWMutex
	advancedConfigInsertCache          = make(map[string]insertCache)
	advancedConfigUpdateCacheMut       sync.RWMutex
	advancedConfigUpdateCache          = make(map[string]updateCache)
	advancedConfigUpsertCacheMut       sync.RWMutex
	advancedConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var advancedConfigAfterSelectHooks []AdvancedConfigHook

var advancedConfigBeforeInsertHooks []AdvancedConfigHook
var advancedConfigAfterInsertHooks []AdvancedConfigHook

var advancedConfigBeforeUpdateHooks []AdvancedConfigHook
var advancedConfigAfterUpdateHooks []AdvancedConfigHook

var advancedConfigBeforeDeleteHooks []AdvancedConfigHook
var advancedConfigAfterDeleteHooks []AdvancedConfigHook

var advancedConfigBeforeUpsertHooks []AdvancedConfigHook
var advancedConfigAfterUpsertHooks []AdvancedConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdvancedConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AdvancedConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AdvancedConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AdvancedConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AdvancedConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AdvancedConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AdvancedConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AdvancedConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AdvancedConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range advancedConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdvancedConfigHook registers your hook function for all future operations.
func AddAdvancedConfigHook(hookPoint boil.HookPoint, advancedConfigHook AdvancedConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		advancedConfigAfterSelectHooks = append(advancedConfigAfterSelectHooks, advancedConfigHook)
	case boil.BeforeInsertHook:
		advancedConfigBeforeInsertHooks = append(advancedConfigBeforeInsertHooks, advancedConfigHook)
	case boil.AfterInsertHook:
		advancedConfigAfterInsertHooks = append(advancedConfigAfterInsertHooks, advancedConfigHook)
	case boil.BeforeUpdateHook:
		advancedConfigBeforeUpdateHooks = append(advancedConfigBeforeUpdateHooks, advancedConfigHook)
	case boil.AfterUpdateHook:
		advancedConfigAfterUpdateHooks = append(advancedConfigAfterUpdateHooks, advancedConfigHook)
	case boil.BeforeDeleteHook:
		advancedConfigBeforeDeleteHooks = append(advancedConfigBeforeDeleteHooks, advancedConfigHook)
	case boil.AfterDeleteHook:
		advancedConfigAfterDeleteHooks = append(advancedConfigAfterDeleteHooks, advancedConfigHook)
	case boil.BeforeUpsertHook:
		advancedConfigBeforeUpsertHooks = append(advancedConfigBeforeUpsertHooks, advancedConfigHook)
	case boil.AfterUpsertHook:
		advancedConfigAfterUpsertHooks = append(advancedConfigAfterUpsertHooks, advancedConfigHook)
	}
}

// OneG returns a single advancedConfig record from the query using the global executor.
func (q advancedConfigQuery) OneG(ctx context.Context) (*AdvancedConfig, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single advancedConfig record from the query.
func (q advancedConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AdvancedConfig, error) {
	o := &AdvancedConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for advanced_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AdvancedConfig records from the query using the global executor.
func (q advancedConfigQuery) AllG(ctx context.Context) (AdvancedConfigSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AdvancedConfig records from the query.
func (q advancedConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdvancedConfigSlice, error) {
	var o []*AdvancedConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to AdvancedConfig slice")
	}

	if len(advancedConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AdvancedConfig records in the query using the global executor
func (q advancedConfigQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AdvancedConfig records in the query.
func (q advancedConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count advanced_config rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q advancedConfigQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q advancedConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if advanced_config exists")
	}

	return count > 0, nil
}

// EnableBasicConfig pointed to by the foreign key.
func (o *AdvancedConfig) EnableBasicConfig(mods ...qm.QueryMod) basicConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"enable\" = ?", o.Enable),
	}

	queryMods = append(queryMods, mods...)

	return BasicConfigs(queryMods...)
}

// LoadEnableBasicConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (advancedConfigL) LoadEnableBasicConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAdvancedConfig interface{}, mods queries.Applicator) error {
	var slice []*AdvancedConfig
	var object *AdvancedConfig

	if singular {
		var ok bool
		object, ok = maybeAdvancedConfig.(*AdvancedConfig)
		if !ok {
			object = new(AdvancedConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAdvancedConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAdvancedConfig))
			}
		}
	} else {
		s, ok := maybeAdvancedConfig.(*[]*AdvancedConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAdvancedConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAdvancedConfig))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &advancedConfigR{}
		}
		if !queries.IsNil(object.Enable) {
			args = append(args, object.Enable)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &advancedConfigR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Enable) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Enable) {
				args = append(args, obj.Enable)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`saml_sp.basic_config`),
		qm.WhereIn(`saml_sp.basic_config.enable in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BasicConfig")
	}

	var resultSlice []*BasicConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BasicConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for basic_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for basic_config")
	}

	if len(basicConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EnableBasicConfig = foreign
		if foreign.R == nil {
			foreign.R = &basicConfigR{}
		}
		foreign.R.EnableAdvancedConfig = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Enable, foreign.Enable) {
				local.R.EnableBasicConfig = foreign
				if foreign.R == nil {
					foreign.R = &basicConfigR{}
				}
				foreign.R.EnableAdvancedConfig = local
				break
			}
		}
	}

	return nil
}

// SetEnableBasicConfigG of the advancedConfig to the related item.
// Sets o.R.EnableBasicConfig to related.
// Adds o to related.R.EnableAdvancedConfig.
// Uses the global database handle.
func (o *AdvancedConfig) SetEnableBasicConfigG(ctx context.Context, insert bool, related *BasicConfig) error {
	return o.SetEnableBasicConfig(ctx, boil.GetContextDB(), insert, related)
}

// SetEnableBasicConfig of the advancedConfig to the related item.
// Sets o.R.EnableBasicConfig to related.
// Adds o to related.R.EnableAdvancedConfig.
func (o *AdvancedConfig) SetEnableBasicConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BasicConfig) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"saml_sp\".\"advanced_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"enable"}),
		strmangle.WhereClause("\"", "\"", 2, advancedConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.Enable, o.Enable}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Enable, related.Enable)
	if o.R == nil {
		o.R = &advancedConfigR{
			EnableBasicConfig: related,
		}
	} else {
		o.R.EnableBasicConfig = related
	}

	if related.R == nil {
		related.R = &basicConfigR{
			EnableAdvancedConfig: o,
		}
	} else {
		related.R.EnableAdvancedConfig = o
	}

	return nil
}

// AdvancedConfigs retrieves all the records using an executor.
func AdvancedConfigs(mods ...qm.QueryMod) advancedConfigQuery {
	mods = append(mods, qm.From("\"saml_sp\".\"advanced_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"saml_sp\".\"advanced_config\".*"})
	}

	return advancedConfigQuery{q}
}

// FindAdvancedConfigG retrieves a single record by ID.
func FindAdvancedConfigG(ctx context.Context, enable bool, selectCols ...string) (*AdvancedConfig, error) {
	return FindAdvancedConfig(ctx, boil.GetContextDB(), enable, selectCols...)
}

// FindAdvancedConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdvancedConfig(ctx context.Context, exec boil.ContextExecutor, enable bool, selectCols ...string) (*AdvancedConfig, error) {
	advancedConfigObj := &AdvancedConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"saml_sp\".\"advanced_config\" where \"enable\"=$1", sel,
	)

	q := queries.Raw(query, enable)

	err := q.Bind(ctx, exec, advancedConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from advanced_config")
	}

	if err = advancedConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return advancedConfigObj, err
	}

	return advancedConfigObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AdvancedConfig) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AdvancedConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no advanced_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(advancedConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	advancedConfigInsertCacheMut.RLock()
	cache, cached := advancedConfigInsertCache[key]
	advancedConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			advancedConfigAllColumns,
			advancedConfigColumnsWithDefault,
			advancedConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(advancedConfigType, advancedConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(advancedConfigType, advancedConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"saml_sp\".\"advanced_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"saml_sp\".\"advanced_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into advanced_config")
	}

	if !cached {
		advancedConfigInsertCacheMut.Lock()
		advancedConfigInsertCache[key] = cache
		advancedConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AdvancedConfig record using the global executor.
// See Update for more documentation.
func (o *AdvancedConfig) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AdvancedConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AdvancedConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	advancedConfigUpdateCacheMut.RLock()
	cache, cached := advancedConfigUpdateCache[key]
	advancedConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			advancedConfigAllColumns,
			advancedConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update advanced_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"saml_sp\".\"advanced_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, advancedConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(advancedConfigType, advancedConfigMapping, append(wl, advancedConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update advanced_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for advanced_config")
	}

	if !cached {
		advancedConfigUpdateCacheMut.Lock()
		advancedConfigUpdateCache[key] = cache
		advancedConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q advancedConfigQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q advancedConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for advanced_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for advanced_config")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AdvancedConfigSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdvancedConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), advancedConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"saml_sp\".\"advanced_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, advancedConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in advancedConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all advancedConfig")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AdvancedConfig) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AdvancedConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no advanced_config provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(advancedConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	advancedConfigUpsertCacheMut.RLock()
	cache, cached := advancedConfigUpsertCache[key]
	advancedConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			advancedConfigAllColumns,
			advancedConfigColumnsWithDefault,
			advancedConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			advancedConfigAllColumns,
			advancedConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert advanced_config, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(advancedConfigPrimaryKeyColumns))
			copy(conflict, advancedConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"saml_sp\".\"advanced_config\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(advancedConfigType, advancedConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(advancedConfigType, advancedConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert advanced_config")
	}

	if !cached {
		advancedConfigUpsertCacheMut.Lock()
		advancedConfigUpsertCache[key] = cache
		advancedConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AdvancedConfig record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AdvancedConfig) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AdvancedConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AdvancedConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no AdvancedConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), advancedConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"saml_sp\".\"advanced_config\" WHERE \"enable\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from advanced_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for advanced_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q advancedConfigQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q advancedConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no advancedConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from advanced_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for advanced_config")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AdvancedConfigSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdvancedConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(advancedConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), advancedConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"saml_sp\".\"advanced_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, advancedConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from advancedConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for advanced_config")
	}

	if len(advancedConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AdvancedConfig) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no AdvancedConfig provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AdvancedConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAdvancedConfig(ctx, exec, o.Enable)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdvancedConfigSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty AdvancedConfigSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdvancedConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdvancedConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), advancedConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"saml_sp\".\"advanced_config\".* FROM \"saml_sp\".\"advanced_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, advancedConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in AdvancedConfigSlice")
	}

	*o = slice

	return nil
}

// AdvancedConfigExistsG checks if the AdvancedConfig row exists.
func AdvancedConfigExistsG(ctx context.Context, enable bool) (bool, error) {
	return AdvancedConfigExists(ctx, boil.GetContextDB(), enable)
}

// AdvancedConfigExists checks if the AdvancedConfig row exists.
func AdvancedConfigExists(ctx context.Context, exec boil.ContextExecutor, enable bool) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"saml_sp\".\"advanced_config\" where \"enable\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, enable)
	}
	row := exec.QueryRowContext(ctx, sql, enable)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if advanced_config exists")
	}

	return exists, nil
}

// Exists checks if the AdvancedConfig row exists.
func (o *AdvancedConfig) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AdvancedConfigExists(ctx, exec, o.Enable)
}
